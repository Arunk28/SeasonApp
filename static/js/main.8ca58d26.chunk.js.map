{"version":3,"sources":["SeasonComponent.js","Spinner.js","index.js"],"names":["SeasonConfig","Winter","text","iconName","Summer","SeasonComponent","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","error","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","Fragment","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"0MAUMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,qBACNC,SAAU,aAEZC,OAAQ,CACNF,KAAM,qBACNC,SAAU,SAeCE,EAZS,SAACC,GACvB,IAlBiBC,EAAKC,EAkBhBC,GAlBWF,EAkBQD,EAAMC,KAlBTC,GAkBc,IAAIE,MAAOC,YAjBnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAaG,EAENP,EAAaS,GAAhCP,EAFyB,EAEzBA,KAAMC,EAFmB,EAEnBA,SACd,OACE,sBAAKS,UAAS,yBAAoBH,GAAlC,UACE,mBAAGG,UAAS,UAAKT,EAAL,6BACZ,6BAAKD,IACL,mBAAGU,UAAS,UAAKT,EAAL,kCCzBZU,EAAU,SAACP,GACf,OACE,qBAAKM,UAAU,mBAAf,SACE,qBAAKA,UAAU,qBAAf,SAAqCN,EAAMQ,aAKjDD,EAAQE,aAAe,CAAED,QAAS,gBAEnBD,QCNTG,E,4MACJC,MAAQ,CAAEV,IAAK,KAAMW,MAAO,I,kEAGP,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEN,MAAOS,EAAIb,e,sCAKtC,OAAKc,KAAKX,MAAMV,KAAOqB,KAAKX,MAAMC,MACzB,2CAAcU,KAAKX,MAAMC,SAE9BU,KAAKX,MAAMV,MAAQqB,KAAKX,MAAMC,MACzB,cAAC,EAAD,CAAiBX,IAAKqB,KAAKX,MAAMV,MAGnC,cAAC,EAAD,CAASO,QAAQ,wC,+BAIxB,OAAO,cAAC,IAAMe,SAAP,UAAiBD,KAAKE,sB,GAvBfC,IAAMC,WA2BxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.8ca58d26.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\nimport React from \"react\";\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? \"Summer\" : \"Winter\";\n  } else {\n    return lat > 0 ? \"Winter\" : \"Summer\";\n  }\n};\nconst SeasonConfig = {\n  Winter: {\n    text: \"Burr, it is chilly\",\n    iconName: \"snowflake\",\n  },\n  Summer: {\n    text: \"Lets hit the beach\",\n    iconName: \"sun\",\n  },\n};\nconst SeasonComponent = (props) => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName } = SeasonConfig[season];\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`${iconName} icon icon-left massive`}></i>\n      <h1>{text}</h1>\n      <i className={`${iconName} icon icon-right massive`}></i>\n    </div>\n  );\n};\n\nexport default SeasonComponent;\n","import React from \"react\";\n\nconst Spinner = (props) => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">{props.message}</div>\n    </div>\n  );\n};\n\nSpinner.defaultProps = { message: \"Loading ... \" };\n\nexport default Spinner;\n","import React  from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonComponent from \"./SeasonComponent\";\nimport Spinner from \"./Spinner\";\n\n//class component excersise\nclass App extends React.Component {\n  state = { lat: null, error: \"\" };\n\n  //lifecycle method component did mount\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      (position) => this.setState({ lat: position.coords.latitude }),\n      (err) => this.setState({ error: err.message }),\n    );\n  }\n\n  renderContent() {\n    if (!this.state.lat && this.state.error) {\n      return <div>Error : {this.state.error}</div>;\n    }\n    if (this.state.lat && !this.state.error) {\n      return <SeasonComponent lat={this.state.lat} />;\n    }\n\n    return <Spinner message=\"Please allow the location request\" />;\n  }\n\n  render() {\n    return <React.Fragment>{this.renderContent()}</React.Fragment>;\n  }\n}\n//render the jsx\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}